include('GG.twoD.jscad');
include('GG.cuts.jscad');

function main() {
    
    var segments=[]; 
    var template=
"##########################################         ######################################\n"+
"#................#........#..............#         #......#.............................#\n"+
"#................#........#..............#         #......b.............................#\n"+
"#................#........#..............#         #......b.............................#\n"+
"#................#........#..............#         #......b.............................#\n"+
"#................#........#..............#         #......b.............................#\n"+
"#................#........#..............#         #......b.............................#\n"+
"#................#........#..............#         #......b.............................#\n"+
"#................#bbbbbbbb#..............#.........#......b.............................#\n"+
"#................#.......................#.........#......#.............................#\n"+
"#................d.......................d.........########.............................#\n"+
"#................d.......................d.........b......#.............................#\n"+
"w................d.......................d.........b......#.............................#\n"+
"w................d.......................d.........b......#.............................w\n"+
"w................d.......................d.........b......#.............................w\n"+
"w................d.......................d.........b......#.............................w\n"+
"w................d.......................d.........b......#.............................w\n"+
"w................#.......................#.........b......#.............................w\n"+
"w................#.......................#.........#########............................w\n"+
"w................#.......................#.................#............................w\n"+
"#................#.......................#.................d............................w\n"+
"#................#.......................#.................d............................#\n"+
"#................#.......................#.................d............................#\n"+
"#................#########################.................d............................#\n"+
"#........................................d.................d............................#\n"+
"#........................................d.................d............................#\n"+
"#........................................d.................d............................#\n"+
"#........................................d.................d............................#\n"+
"#........................................d.................############################## H\n"+
"#........................................d.................#............................#\n"+
"#........................................d.................#............................#\n"+
"#........................................d.................#............................#\n"+
"#........................................#########dddddddd##............................#\n"+
"#........................................#.....#........................................#\n"+
"#........................................#.....b........................................#\n"+
"#........................................#.....b........................................w\n"+
"#........................................#.....b........................................w\n"+
"#........................................#.....b........................................w\n"+
"#........................................#.....b........................................w\n"+
"#........................................#.....b........................................w\n"+
"w........................................#.....b........................................w\n"+
"w........................................#.....b........................................w\n"+
"w........................................#.....b........................................w\n"+
"w........................................#.....#........................................#\n"+
"w........................................#######........................................#\n"+
"w........................................#.....#........................................#\n"+
"w........................................b.....#........................................#\n"+
"w........................................b.....#........................................#\n"+
"#........................................b.....#........................................#\n"+
"#........................................b.....#........................................#\n"+
"#........................................b.....#........................................#\n"+
"#........................................b.....#........................................#\n"+
"#........................................b.....#........................................#\n"+
"#........................................b.....#........................................#\n"+
"#........................................b.....#........................................#\n"+
"#........................................#.....#........................................#\n"+
"#########################################################################################\n"+
"                                       V"; ;
   			 
    var translate = new Object(); 
	
	// floor = 1 foot (joists and all)  
	// window = 3 feet after floor, 4 feet of window
	// door = 7 feet of door
	// above door and window = 1 foot.
	
	translate['#'] = function() { return cube(1).scale([1,1,9]); }; 
	translate['.'] = function() { return cube(1); }; 
	translate['b'] = function() { return cube(1); }; 
	translate['d'] = function() { 
		return union([
			cube(1), 
			cube(1).translate([0,0,8])
		]); 
	}; 
	translate['w'] = function()	{ 
		return union([
			cube({size: [1,1,4]}), 
			cube(1).translate([0,0,8])
		]); 
	};

	var twoD = new GG.TwoD(); 
    var x=0; 
    var y=0; 
    for(var i=0, len=template.length; i<len; i++) {
        x++; 
        var ch = template[i];
        if (ch == '\n' || ch=='\r') { 
            x = 0; 
            y++; 
		} else { 
		   twoD.Set(x,y,ch); 
		}
	}
	var xMax = twoD.GetXMax();
	var yMax = twoD.GetYMax(); 

	var tryBuckets = [];
	for(x=1; x<xMax; x++) { 
		for (y=1; y<yMax; y++) { 
			tryBuckets.push([x,y]); 
		}
	}
	tryBuckets.sort(
		function(a,b) { 
			return (b[0]*b[1]) - (a[0]*a[1]) 
		} 
	);
	
	// TODO: idea is to look for "groups" of things, like >, so can replace the whole thing with 
	// a set of steps.   Only when we get steps, though. 
	
	for (var tbi=0; tbi<tryBuckets.length; tbi++) {
		var dx = tryBuckets[tbi][0]; 
		var dy = tryBuckets[tbi][1]; 
		for (y=0; y<=twoD.GetYMax()-dy; y++) { 
			for (x = 0; x < twoD.GetXMax()-dx; x++) { 
				var ch = twoD.Get(x,y); 
				if (ch in translate) { 
					if (twoD.BlockEqual(x,y,dx,dy,ch)) { 
						var s = translate[ch] (); 
						s = s.scale([dx,dy,1]).translate([x,y,0]); 
						segments.push(s); 
						twoD.BlockSet(x,y,dx,dy,undefined);	
					}
				}
			}
		} 
	}
	

	var floor = union(segments);  
	var b = floor.getBounds(); 
	floor.translate([b[0].x,b[0].y,b[0].z]); 
	
	segments = [ floor ]; 

	// Final polish.  Set scale
	var scale=48; 
	var feetTomm=304.8; 
	var finalX = (30 * feetTomm)/scale;   
	var finalY = (20 * feetTomm)/scale;   
	var finalZ = (8 * feetTomm)/scale; 
	for (var i=0; i<segments.length; i++) { 
		segments[i] = segments[i].mirroredY().scale([finalX/xMax, finalY/yMax, finalZ/10]); 
	}
	
	// Do some cutting with nobbies
	segments = GG.zcut(segments,0.3,0.9," N              N "); 
	segments = GG.xcut(segments,0.4,0.9," N              N "); 
	segments = GG.ycut(segments,0.8,0.9," N              N "); 
	
	
	// add in some scale things. my bed handles about 130mm cubed
	segments.push( cube(1).scale([130,2,3]).translate([0,15,-15]) ); 
	segments.push( cube(1).scale([1,-130,3]).translate([-15,0,-15]) ); 
	segments.push( cube(1).scale([1,2,130]).translate([-15,15,0]) ); 
	
	// Color everything	
	for(var i=0; i<segments.length; i++) { 
		segments[i] = segments[i].setColor(hsl2rgb(Math.random(),Math.random()*0.5+0.5,0.5)); 
	}
	
	return segments;
	
	// TODO: find a way to lay the objects out.  Probably want to flip the top pieces over. 
	
	// Convert to multi-part format -- THIS DOES NOT WORK
	//var newsegments = []; 
	//for (var i=0; i<segments.length; i++) { 
	//	newsegments.push({ name: "A"+i, caption: "A"+i, data: segments[i]});
	//}
	//return newsegments; 
}
